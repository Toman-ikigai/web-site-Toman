---
import "@/styles/globals.css";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";

interface Pages {
  params: {
    lang: string;
    url: string;
  };
}

const langParam = Astro.params.lang;
const urlFile = Astro.params.url;

const validLangs = ["es", "en"];
if (langParam && !validLangs.includes(langParam)) {
  const lang = navigator.language.startsWith("es") ? "es" : "en";
  const currentUrl = new URL(Astro.request.url);
  currentUrl.pathname = `/${lang}`;
  return Astro.redirect(currentUrl.toString());
}
const lang = langParam || (navigator.language.startsWith("es") ? "es" : "en");

export async function getStaticPaths() {
  const ids = [
    "rlqpe7mjrtz5qmxcqan3",
    "hizppmcqr7owwj3htkje",
    "hxynm2uchpbctaxjve2e",
    "hqse65lxwb2jz95caufl",
  ];

  const newItem: Pages[] = ids.flatMap((item) => [
    { params: { lang: "es", url: item } },
    { params: { lang: "en", url: item } },
  ]);
  return newItem;
}

const urlPdf = `https://res.cloudinary.com/dvggwdqnj/image/upload/v1734647242/catalagos/${urlFile}.pdf`;
---

<Layout title="TOMAN JIDO-KA IKIGAI" lang={lang}>
  <Header lang={lang} />

  <section
    class="flex flex-col items-center justify-center min-h-screen p-4 mx-auto"
  >
    <input type="hidden" id="urlFile" value={urlPdf} readonly />
    <div
      id="pdfContainer"
      class="flex flex-col gap-5 bg-white p-4 rounded-lg shadow-lg mt-24"
    >
    </div>
    <div id="loader" class="flex flex-col items-center gap-2 mt-24">
      <div
        class="w-12 h-12 border-4 border-blue-500 rounded-full animate-spin border-t-transparent"
      >
      </div>
      <p class="text-gray-600">Loading PDF...</p>
    </div>
  </section>
</Layout>

<script
  src="https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.min.mjs"
  type="module"></script>
<script type="module">
  const { pdfjsLib } = globalThis;
  const WORKER_PATH =
    "https://unpkg.com/pdfjs-dist@4.0.379/build/pdf.worker.min.mjs";
  pdfjsLib.GlobalWorkerOptions.workerSrc = WORKER_PATH;

  const urlFile = document.getElementById("urlFile").value;
  const loader = document.getElementById("loader");
  const pdfContainer = document.getElementById("pdfContainer");

  const PDF_PATH = urlFile;

  async function loadPDF() {
    try {
      const pdf = await pdfjsLib.getDocument(PDF_PATH).promise;
      pdfContainer.innerHTML = "";

      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        const page = await pdf.getPage(pageNum);
        let scale;
        if (window.innerWidth < 768) {
          scale = 0.2;
        } else if (window.innerWidth >= 768 && window.innerWidth < 1024) {
          scale = 0.5;
        } else {
          scale = 0.8;
        }
        const viewport = page.getViewport({ scale });

        const canvas = document.createElement("canvas");
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        const context = canvas.getContext("2d");
        await page.render({ canvasContext: context, viewport }).promise;

        pdfContainer.appendChild(canvas);
      }
    } finally {
      loader.classList.add("hidden");
      pdfContainer.classList.remove("hidden");
    }
  }

  loadPDF();
</script>
